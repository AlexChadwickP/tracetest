/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"flag"
	"log"
	"net/http"

	openapi "github.com/kubeshop/tracetest/server/go"
	"github.com/kubeshop/tracetest/server/go/executor"
	"github.com/kubeshop/tracetest/server/go/testdb"
	"github.com/kubeshop/tracetest/server/go/tracedb"
	"github.com/kubeshop/tracetest/server/go/tracedb/jaegerdb"
	"github.com/kubeshop/tracetest/server/go/tracedb/tempodb"
)

var cfg = flag.String("config", "config.yaml", "path to the config file")

func main() {
	flag.Parse()
	c, err := LoadConfig(*cfg)
	if err != nil {
		log.Fatal(err)
	}
	testDB, err := testdb.New(c.PostgresConnString)
	if err != nil {
		log.Fatal(err)
	}

	var traceDB tracedb.TraceDB
	switch {
	case c.JaegerConnectionConfig != nil:
		log.Printf("connecting to Jaeger: %s\n", c.JaegerConnectionConfig.Endpoint)
		traceDB, err = jaegerdb.New(c.JaegerConnectionConfig)
		if err != nil {
			log.Fatal(err)
		}
	case c.TempoConnectionConfig != nil:
		log.Printf("connecting to tempo: %s\n", c.TempoConnectionConfig.Endpoint)
		traceDB, err = tempodb.New(c.TempoConnectionConfig)
		if err != nil {
			log.Fatal(err)
		}
	}

	ex, err := executor.New()
	if err != nil {
		log.Fatal(err)
	}

	apiApiService := openapi.NewApiApiService(traceDB, testDB, ex)
	apiApiController := openapi.NewApiApiController(apiApiService)

	router := openapi.NewRouter(apiApiController)
	dir := "./html"
	router.PathPrefix("/").Handler(http.FileServer(http.Dir(dir)))

	log.Printf("Server started")
	log.Fatal(http.ListenAndServe(":8080", router))
}
