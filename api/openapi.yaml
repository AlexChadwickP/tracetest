openapi: 3.0.0
info:
  version: 0.0.1
  title: TraceTest
  description: OpenAPI definition for TraceTest endpoint and resources
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ken21/Tracetest/0.0.1
  - url: /api
paths:
  /tests:
    get:
      tags:
        - api
      summary: "Get tests"
      description: "get tests"
      operationId: getTests
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"
        500:
          description: "problem with getting tests"
          # content:
          #   application/problem+json:
          #     schema:
          #       type: array
          #       items:
          #         $ref: "#/components/schemas/Problem"
    post:
      tags:
        - api
      summary: "Create new test"
      description: "Create new test action"
      operationId: createTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
        500:
          description: "problem with creating test"
          # content:
          #   application/problem+json:
          #     schema:
          #       type: array
          #       items:
          #         $ref: "#/components/schemas/Problem"
  /tests/{testId}:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
      summary: "get test"
      description: "get test"
      operationId: getTest
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
        500:
          description: "problem with getting a test"
  /tests/{testId}/run:
    post:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
      summary: "run test"
      description: "run a particular test"          
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestRun"

  /tests/{testId}/results/{resultId}:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
        - in: path
          name: resultId
          schema:
            type: string
          required: true
      summary: "get test result"
      description: "get a particular test result"   
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Result"
  /tests/{testId}/results/{resultId}/trace:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
        - in: path
          name: resultId
          schema:
            type: string
          required: true
      summary: "get the trace for a test result"
      description: "get the trace created for a particular test result"   
      responses:
        200:
          description: trace
          content:
            application/json:
              schema:
                type: object

  /tests/{testId}/results:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
      summary: "get the results for a test"
      description: "get the results from a particular test"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Result"
  /tests/{testId}/assertions:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
      operationId: getAssertions
      summary: "Get assertions for a test"
      description: "Gets all assertions associated to a particular test"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assertion"
    post:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
          required: true
      summary: "Create an assertion for a test"
      description: "Create an assertion for a particular test"
      operationId: createAssertion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assertion"
      responses:
        "200":
          description: OK
components:
  schemas:
    Test:
      type: object
      properties:
        testId:
          type: string
          description: ID
          readOnly: true
        name:
          type: string
        description:
          type: string
        serviceUnderTest:
          type: object
          description: TODO(pov) Postman collections format for Requests
          properties:
            id:
              type: string
              description: ID
              readOnly: true
            url:
              type: string
              description: URL of the service under test
            auth:
              type: string
              description: authorization data for the request
        assertions:
          type: array
          items:
            $ref: "#/components/schemas/Assertion"
          description: Definition of assertions that are going to be made
        lastTestResult:
          $ref: "#/components/schemas/Result"
    Assertion:
      type: object
      properties:
        assertionId:
          type: string
          description: ID
          readOnly: true
        selectors:
          type: array
          items:
            $ref: "#/components/schemas/SelectorItem"
        spanAssertions:
          type: array
          items:
            $ref: "#/components/schemas/SpanAssertion"
    Result:
      type: object
      properties:
        resultId:
          type: string
          description: ID
          readOnly: true
        testId:
          type: string
          description: test ID
          readOnly: true
        traceId:
          type: string
          description: trace ID
          readOnly: true
        spanId:
          type: string
          description: parent span ID
          readOnly: true
        testResult:
          type: array
          items:
            $ref: "#/components/schemas/TestResult"
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        response:
          type: object
          description: TODO(pov) This is going to be HTTP Response object for now, at some point it might be GRPC/SOAP/...
        trace:
          type: object
          description: Trace in standard OTEL format, only set when getting single test result
    TestResult:
      type: object
      description: "Individual test result"
      properties:
        assertionId: 
          type: string
          description: assertion ID
          readOnly: true
        spanAssertionId: 
          type: string
          description: "span assertion ID - the specific span assertion this result references"
          readOnly: true   
        spanId:
          type: string
          description: "span ID - unique spanId pointing to the trace span referenced in this test result"
          readOnly: true
        observedValue:
          type: string
          description: "value that the trace for this test run contained"
          readOnly: true
        successful:
          type: boolean 
          description: "whether this assertion passed or failed"
    TestRun:
      type: object
      properties:
        testRunId:
          type: string
          description: ID
          readOnly: true
    SelectorItem:
      type: object
      properties:
        locationName:
          type: string
          enum: [RESOURCE_ATTRIBUTES, INSTRUMENTATION_LIBRARY, SPAN, SPAN_ATTRIBUTES]
          description: Example "SPAN"
        propertyName:
          type: string
          description: Example "operation"
        value:
          type: string
          description: Example "POST /users/verify"
        valueType: 
          type: string
          description: TODO(pov) think about value types?
          enum: [stringValue, intValue]
    SpanAssertion:
      type: object
      properties:
        spanAssertionId:
          type: string
          description: ID
          readOnly: true      
        locationName:
          type: string
          enum: [RESOURCE_ATTRIBUTES, INSTRUMENTATION_LIBRARY, SPAN, SPAN_ATTRIBUTES]
          description: Example "SPAN_ATTRIBUTES"
        propertyName:
          type: string
          description: Example "http.status.code"
        valueType: 
          type: string
          description: Example "intValue"
          enum: [stringValue, intValue]
        operator: 
          type: string
          description: Example "EQUALS"
          enum: [EQUALS, LESSTHAN, GREATERTHAN, NOTEQUALS]
        comparisonValue:
          type: string
          description: Example "200"
