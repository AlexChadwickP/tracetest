openapi: 3.0.0
info:
  version: 0.0.1
  title: TraceTest
  description: OpenAPI definition for TraceTest endpoint and resources
servers:
  - url: /api
paths:
  /tests:
    get:
      tags:
        - api
      summary: "Create new test"
      description: "get tests"
      operationId: getTests
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"
        500:
          description: "problem with creating test"
          # content:
          #   application/problem+json:
          #     schema:
          #       type: array
          #       items:
          #         $ref: "#/components/schemas/Problem"
    post:
      tags:
        - api
      summary: "Create new test"
      description: "Create new test action"
      operationId: createTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
        500:
          description: "problem with creating test"
          # content:
          #   application/problem+json:
          #     schema:
          #       type: array
          #       items:
          #         $ref: "#/components/schemas/Problem"
  /tests/{testid}:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testid
          schema:
            type: string
          required: true
      summary: "get test"
      description: "get test"
      operationId: getTest
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
        500:
          description: "problem with creating test"
  /tests/{testid}/run:
    post:
      tags:
        - api
      parameters:
        - in: path
          name: testid
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestRun"

  /tests/{testid}/results/{id}:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testid
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Result"

  /tests/{testid}/results/{id}/trace:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testid
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: trace
          content:
            application/json:
              schema:
                type: object

  /tests/{id}/results:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Result"
  /tests/{id}/assertions:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      operationId: getAssertions
      description: "Gets all assertions associated to the test"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assertion"
    post:
      tags:
        - api
      description: ""
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      operationId: createAssertion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assertion"
      responses:
        "200":
          description: OK

components:
  schemas:
    Test:
      type: object
      properties:
        id:
          type: string
          description: ID
          readOnly: true
        name:
          type: string
        description:
          type: string
        serviceUnderTest:
          type: object
          description: TODO(pov) Postman collections format for Requests
          properties:
            id:
              type: string
              description: ID
              readOnly: true
            url:
              type: string
              description: URL of the service under test
            auth:
              type: string
              description: authorization data for the request
        assertions:
          type: array
          items:
            $ref: "#/components/schemas/Assertion"
          description: Definition of assertions that are going to be made
        lastTestResult:
          $ref: "#/components/schemas/Result"
    Assertion:
      type: object
      properties:
        id:
          type: string
          description: ID
          readOnly: true
        selectors:
          type: array
          items:
            $ref: "#/components/schemas/SelectorItem"
        spanAssertions:
          type: array
          items:
            $ref: "#/components/schemas/SpanAssertion"
        successful:
          type: boolean
    Result:
      type: object
      properties:
        id:
          type: string
          description: ID
          readOnly: true
        testid:
          type: string
          description: test ID
          readOnly: true
        traceid:
          type: string
          description: trace ID
          readOnly: true
        spanid:
          type: string
          description: parent span ID
          readOnly: true
        successful:
          $ref: "#/components/schemas/Assertion"
        failed:
          $ref: "#/components/schemas/Assertion"
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        response:
          type: object
          description: TODO(pov) This is going to be HTTP Response object for now, at some point it might be GRPC/SOAP/...
        trace:
          $ref: "./trace.yaml#/definitions/api_v3SpansResponseChunk"
    Attribute:
      type: object
      properties:
        id:
          type: string
          description: ID
          readOnly: true
        key:
          type: string
        value:
          type: string
    TestRun:
      type: object
      properties:
        id:
          type: string
          description: ID
          readOnly: true
    SelectorItem:
      type: object
      properties:
        locationName:
          type: string
          enum: [RESOURCE_ATTRIBUTES, INSTRUMENTATION_LIBRARY, SPAN, SPAN_ATTRIBUTES]
          description: Example "SPAN"
        propertyName:
          type: string
          description: Example "operation"
        value:
          type: string
          description: Example "POST /users/verify"
        valueType: 
          type: string
          description: TODO(pov) think about value types?
          enum: [stringValue, intValue]
    SpanAssertion:
      type: object
      properties:
        locationName:
          type: string
          enum: [RESOURCE_ATTRIBUTES, INSTRUMENTATION_LIBRARY, SPAN, SPAN_ATTRIBUTES]
          description: Example "SPAN_ATTRIBUTES"
        propertyName:
          type: string
          description: Example "http.status.code"
        valueType: 
          type: string
          description: Example "intValue"
          enum: [stringValue, intValue]
        operator: 
          type: string
          description: Example "EQUALS"
          enum: [EQUALS, LESSTHAN, GREATERTHAN, NOTEQUALS]
        comparisonValue:
          type: string
          description: Example "200"
